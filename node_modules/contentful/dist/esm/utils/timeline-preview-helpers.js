import { checkEnableTimelinePreviewIsAllowed } from './validate-params.js';
import { ValidationError } from './validation-error.js';

function isValidRelease(release) {
    return !!(release && typeof release === 'object' && typeof release.lte === 'string');
}
function isValidTimestamp(timestamp) {
    return !!(timestamp &&
        typeof timestamp === 'object' &&
        (typeof timestamp.lte === 'string' || timestamp.lte instanceof Date));
}
const isValidTimelinePreviewConfig = (timelinePreview) => {
    if (typeof timelinePreview !== 'object' ||
        timelinePreview === null ||
        Array.isArray(timelinePreview)) {
        throw new ValidationError('timelinePreview', `The 'timelinePreview' parameter must be an object.`);
    }
    const hasRelease = isValidRelease(timelinePreview.release);
    const hasTimestamp = isValidTimestamp(timelinePreview.timestamp);
    if (!hasRelease && !hasTimestamp) {
        throw new ValidationError('timelinePreview', `The 'timelinePreview' object must have at least one of 'release' or 'timestamp' with a valid 'lte' property.`);
    }
    return hasRelease || hasTimestamp;
};
const getTimelinePreviewParams = (params) => {
    var _a;
    const host = params === null || params === void 0 ? void 0 : params.host;
    const timelinePreview = (_a = params === null || params === void 0 ? void 0 : params.alphaFeatures) === null || _a === void 0 ? void 0 : _a.timelinePreview;
    const enabled = checkEnableTimelinePreviewIsAllowed(host, timelinePreview);
    return { enabled, timelinePreview };
};

export { getTimelinePreviewParams, isValidTimelinePreviewConfig };
